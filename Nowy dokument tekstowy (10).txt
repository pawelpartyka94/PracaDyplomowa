/***************************************************
  This is an example for our Adafruit FONA Cellular Module

  Designed specifically to work with the Adafruit FONA
  ----> http://www.adafruit.com/products/1946
  ----> http://www.adafruit.com/products/1963
  ----> http://www.adafruit.com/products/2468
  ----> http://www.adafruit.com/products/2542

  These cellular modules use TTL Serial to communicate, 2 pins are
  required to interface
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  BSD license, all text above must be included in any redistribution
 ****************************************************/

/*
THIS CODE IS STILL IN PROGRESS!

Open up the serial console on the Arduino at 115200 baud to interact with FONA

Note that if you need to set a GPRS APN, username, and password scroll down to
the commented section below at the end of the setup() function.
*/
#include "Adafruit_FONA.h"
#include <string.h>
#include <stdlib.h>

#define FONA_RX 2
#define FONA_TX 3
#define FONA_RST 4

int RED = 12;
int GREEN = 11;
int BLUE = 10;


// this is a large buffer for replies
char replybuffer[255];

// We default to using software serial. If you want to use hardware serial
// (because softserial isnt supported) comment out the following three lines 
// and uncomment the HardwareSerial line
#include <SoftwareSerial.h>
SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
SoftwareSerial *fonaSerial = &fonaSS;

// Hardware serial is also possible!
//  HardwareSerial *fonaSerial = &Serial1;

// Use this for FONA 800 and 808s
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
// Use this one for FONA 3G
//Adafruit_FONA_3G fona = Adafruit_FONA_3G(FONA_RST);

uint8_t readline(char *buff, uint8_t maxbuff, uint16_t timeout = 0);

uint8_t type;

void setup() {

    
    pinMode(RED, OUTPUT);
    pinMode(GREEN, OUTPUT);
    pinMode(BLUE, OUTPUT);

  while (!Serial);




  Serial.begin(115200);
  Serial.println(F("FONA basic test"));
  Serial.println(F("Initializing....(May take 3 seconds)"));

  fonaSerial->begin(4800);
  if (! fona.begin(*fonaSerial)) {
    Serial.println(F("Couldn't find FONA"));
    while (1);
  }
  type = fona.type();
  Serial.println(F("FONA is OK"));
  Serial.print(F("Found "));
  switch (type) {
    case FONA800L:
      Serial.println(F("FONA 800L")); break;
    case FONA800H:
      Serial.println(F("FONA 800H")); break;
    case FONA808_V1:
      Serial.println(F("FONA 808 (v1)")); break;
    case FONA808_V2:
      Serial.println(F("FONA 808 (v2)")); break;
    case FONA3G_A:
      Serial.println(F("FONA 3G (American)")); break;
    case FONA3G_E:
      Serial.println(F("FONA 3G (European)")); break;
    default: 
      Serial.println(F("???")); break;
  }
  
  // Print module IMEI number.
  char imei[16] = {0}; // MUST use a 16 character buffer for IMEI!
  uint8_t imeiLen = fona.getIMEI(imei);
  if (imeiLen > 0) {
    Serial.print("Module IMEI: "); Serial.println(imei);
  }

  // Optionally configure a GPRS APN, username, and password.
  // You might need to do this to access your network's GPRS/data
  // network.  Contact your provider for the exact APN, username,
  // and password values.  Username and password are optional and
  // can be removed, but APN is required.
  fona.setGPRSNetworkSettings(F("internet"), F(""), F(""));

 delay(10000);

   // turn GPRS off
        if (!fona.enableGPRS(false))
          Serial.println(F("Failed to turn off"));

                  
      delay(10000);

            // turn GPRS on
        if (!fona.enableGPRS(true))
          Serial.println(F("Failed to turn on"));
                  
      delay(10000);

       if (!fona.enableGPS(false))
          Serial.println(F("Failed to turn off"));

          delay(3000);

             // turn GPS on
        if (!fona.enableGPS(true))
          Serial.println(F("Failed to turn on"));

  // Optionally configure HTTP gets to follow redirects over SSL.
  // Default is not to follow SSL redirects, however if you uncomment
  // the following line then redirects over SSL will be followed.
  //fona.setHTTPSRedirect(true);

  printMenu();
}

void printMenu(void) {
  

  // GPS
  if ((type == FONA3G_A) || (type == FONA3G_E) || (type == FONA808_V1) || (type == FONA808_V2)) {
    Serial.println(F("[O] Turn GPS on (FONA 808 & 3G)"));
    Serial.println(F("[o] Turn GPS off (FONA 808 & 3G)"));
    Serial.println(F("[L] Query GPS location (FONA 808 & 3G)"));
    if (type == FONA808_V1) {
      Serial.println(F("[x] GPS fix status (FONA808 v1 only)"));
    }
    Serial.println(F("[E] Raw NMEA out (FONA808)"));
  }
  
  Serial.println(F("[S] create Serial passthru tunnel"));
  Serial.println(F("-------------------------------------"));
  Serial.println(F(""));

}
void loop() {

    


      //diody
        int b =0;
      uint16_t statuscode;
        int16_t length;
        char url[60] = "pawelas883.000webhostapp.com/sprawdzCzyWlaczycLed.php";

       
        if (!fona.HTTP_GET_start(url, &statuscode, (uint16_t *)&length)) {
          Serial.println("Failed!");
        }
        char c;
        char text[80];
        int i=0;
        while (length > 0) {
          while (fona.available()) {
             text[i]= fona.read();
        Serial.println(text[i]);
         i++;
            // Serial.write is too slow, we'll write directly to Serial register!
        #if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
            loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
            UDR0 = c;
        #else
            Serial.write(c);
        #endif
            length--;
            if (! length) break;
          }
        }
        Serial.println(c);
        fona.HTTP_GET_end();

        if (text[0] == '1'){
          digitalWrite(RED, HIGH);
        }else{
          digitalWrite(RED, LOW);
        }

         if (text[1] == '1'){
          digitalWrite(GREEN, HIGH);
        }else{
          digitalWrite(GREEN, LOW);
        }
        
        if (text[2] == '1'){
          digitalWrite(BLUE, HIGH);
        }else{
          digitalWrite(BLUE, LOW);
        }
   

//wspolrzedne
            // read website URL
         statuscode;
         length = 0;
         char url2[60] = "pawelas883.000webhostapp.com/sprawdzCzyPodacWspolrzedne.php";
         char linkAll [100] = "pawelas883.000webhostapp.com/wysylanieInformacjiDodatkowych.php?dane=";

        if (!fona.HTTP_GET_start(url2, &statuscode, (uint16_t *)&length)) {
       //   Serial.println("Failed!");
        }         
        if (length>0)
        {
          b=1;
      //    Serial.println("test123");
        // check for GPS location
        char gpsdata[120] = "";
        char urlSend[200] = "pawelas883.000webhostapp.com/daneDoBazy.php?dane=";
        char url[200] = "";
       
        
        fona.getGPS(0, gpsdata, 120);
      //  Serial.println(gpsdata);
        if (type == FONA808_V1){
        strncat ( urlSend, gpsdata,200);
       // Serial.println(urlSend);

        statuscode = 0;
        if (!fona.HTTP_GET_start(urlSend, &statuscode, (uint16_t *)&length)) {
          
      //   Serial.println("Wyslalem :)");
        }
        }

        delay(1000);
        // read the battery voltage and percentage
        uint16_t vbat;
        if (! fona.getBattVoltage(&vbat)) {
      //    Serial.println(F("Failed to read Batt"));
        } else {
     //     Serial.print(F("VBat = ")); Serial.print(vbat); Serial.println(F(" mV"));
        }

        char batteryV [200];
        itoa(vbat, batteryV, 10);
        
        if (! fona.getBattPercent(&vbat)) {
          Serial.println(F("Failed to read Batt"));
        } else {
      //    Serial.print(F("VPct = ")); Serial.print(vbat); Serial.println(F("%"));
        }
      //  Serial.println(batteryV);
        char batteryProc [20];
        itoa(vbat, batteryProc, 10);
        char dot [2] = { dot[0] = '@'};
        strcat (batteryProc , dot);
        strcat (batteryProc , batteryV);
        char dot2 [2] = { dot2[0] = '@'};
        strcat (batteryProc , dot2);
    //    Serial.println(batteryProc);

      //  Serial.println("puk");
        delay(2000);
        //RSSI
        uint16_t n = fona.getRSSI();
        int8_t r;

      //  Serial.print(F("RSSI = ")); Serial.print(n); Serial.print(": ");
        if (n == 0) r = -115;
        if (n == 1) r = -111;
        if (n == 31) r = -52;
        if ((n >= 2) && (n <= 30)) {
          r = map(n, 2, 30, -110, -54);
        }
        //Serial.print(r); Serial.println(F(" dBm"));
        char codeRssi [10] = "";
        itoa(r, codeRssi, 10);
      //   Serial.println(codeRssi);
       strcat (batteryProc , codeRssi);
      // Serial.println(batteryProc); 
      //  char linkAll [200] = "pawelas883.000webhostapp.com/wysylanieInformacjiDodatkowych.php?dane=";
         char linkAll [100] = "pawelas883.000webhostapp.com/wysylanieInformacjiDodatkowych.php?dane=";
       strcat (linkAll , batteryProc);
       //Serial.println(linkAll); 
         
        length = 0;
        statuscode = 0;
        if (!fona.HTTP_GET_start(linkAll, &statuscode, (uint16_t *)&length)) {                 
        // Serial.println("Wyslalem :)");
        }


                
        }

        //telefon
         statuscode = 0;
         length = 0;
        char url3[80] = "pawelas883.000webhostapp.com/data.php?dane=6";
         if (!fona.HTTP_GET_start(url3, &statuscode, (uint16_t *)&length)) {
          //Serial.println("Failed!");
        }
                  
          char d;
            
          char link[200];
          i=0;
          int flag ;
          
        while (length>0) {
                   while (fona.available()) {                     
             link[i]= fona.read();  
             // Serial.print(link[i]);
             if (link[i] == '@'){ 
              flag=1;             
              break;
             }                     
             i++;
            // Serial.write is too slow, we'll write directly to Serial register!
        #if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
            loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
            UDR0 = d;
        #else
            Serial.write(d);
        #endif
            length--;
            if (! length) break;
          }
        }

        if (flag==1){
                link[i] = '\0';
        // Serial.println(link);
         
        fona.HTTP_GET_end();


        // send an SMS!
       
        char sendto[10] =  {link[0] , link[1] , link[2] , link[3] , link[4] , link[5]  , link[6] , link[7] , link[8]};
        int p = 0;
     
         while (link[p+1] != '\0'){          
          link[p] = link[p+9];
           //Serial.println(link[p]);
           p++;
         }
         link[p] = '\0';
         //Serial.println(link[p]);
  
        if (!fona.sendSMS(sendto, link)) {
         // Serial.println(F("Failed"));
        } else {
          //Serial.println(F("Sent!"));
        }
        flag=0;
        delay(2000);
        }



    if (b==1){
      fona.HTTP_GET_end();
      // send a USSD!
        char buf[160] ;
         char message[6] = "*101#";
         uint16_t ussdlen;
             if (!fona.sendUSSD(message, buf, 160, &ussdlen)) { 
                //Serial.println(F("Failed"));
              }
            b=0;  
            i=13;
            int n=0;
            char money [10] = "\0";
          while (buf[i] != '.'){
            money[n] = buf[i];
            i++;
            n++;
          }
         
        char link5[55] = "pawelas883.000webhostapp.com/kasa.php?dane=";
        strcat (link5 , money);
         Serial.println(link5);
       length = 0;
        statuscode = 0;
        if (!fona.HTTP_GET_start(link5, &statuscode, (uint16_t *)&length)) {                 
         Serial.println("Wyslalem :)");
        }else{
             Serial.println("Nie udalo sie");
        }
    }
             }
                
void flushSerial() {
  while (Serial.available())
    Serial.read();
}

char readBlocking() {
  while (!Serial.available());
  return Serial.read();
}
uint16_t readnumber() {
  uint16_t x = 0;
  char c;
  while (! isdigit(c = readBlocking())) {
    //Serial.print(c);
  }
  Serial.print(c);
  x = c - '0';
  while (isdigit(c = readBlocking())) {
    Serial.print(c);
    x *= 10;
    x += c - '0';
  }
  return x;
}

uint8_t readline(char *buff, uint8_t maxbuff, uint16_t timeout) {
  uint16_t buffidx = 0;
  boolean timeoutvalid = true;
  if (timeout == 0) timeoutvalid = false;

  while (true) {
    if (buffidx > maxbuff) {
      //Serial.println(F("SPACE"));
      break;
    }

    while (Serial.available()) {
      char c =  Serial.read();

      //Serial.print(c, HEX); Serial.print("#"); Serial.println(c);

      if (c == '\r') continue;
      if (c == 0xA) {
        if (buffidx == 0)   // the first 0x0A is ignored
          continue;

        timeout = 0;         // the second 0x0A is the end of the line
        timeoutvalid = true;
        break;
      }
      buff[buffidx] = c;
      buffidx++;
    }

    if (timeoutvalid && timeout == 0) {
      //Serial.println(F("TIMEOUT"));
      break;
    }
    delay(1);
  }
  buff[buffidx] = 0;  // null term
  return buffidx;
}